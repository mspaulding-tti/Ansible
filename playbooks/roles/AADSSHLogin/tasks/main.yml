---
# roles/AADSSHLogin/tasks/main.yml
# Installs the Azure VM extension "Azure AD based SSH Login" (type: AADSSHLoginForLinux)
# for Linux VMs, delegated to localhost so Azure SDK imports happen in the EE.

###############################################################################
# 0) Gather and normalize identifiers from inventory/hostvars
###############################################################################
- name: Build parts from resource ID (if present)
  vars:
    hv: "{{ hostvars[inventory_hostname] }}"
  set_fact:
    rid_parts: "{{ (hv.id | default('')) | string | split('/') }}"

- name: Derive Azure identifiers from hostvars
  vars:
    hv: "{{ hostvars[inventory_hostname] }}"
  set_fact:
    # Prefer explicit fields provided by azure_rm inventory; fall back to parsing the resource ID
    azure_rg: >-
      {{ hv.resource_group
         | default(rid_parts[4] | default(omit), true) }}
    azure_vm_name: >-
      {{ hv.name
         | default(rid_parts[-1] | default(inventory_hostname), true) }}
    azure_location: "{{ hv.location | default(omit) }}"

- name: Validate required identifiers
  assert:
    that:
      - azure_rg is defined
      - azure_vm_name is defined
    fail_msg: >
      Missing resource_group and/or VM name for {{ inventory_hostname }}.
      Ensure your inventory/hostvars include them or an Azure resource ID.

###############################################################################
# 1) All Azure control-plane calls delegated to localhost (controller/EE)
###############################################################################
- block:
    - name: Optional | Sanity info about where we are running
      command: python3 -c 'import sys,platform; print(sys.executable, platform.node())'
      changed_when: false
      when: aadsshlogin_debug | default(true) | bool

    # ---- Credentials resolution (env or role vars) ----
    - name: Resolve Azure credentials (from vars or environment)
      set_fact:
        _azure_sub:    "{{ aadsshlogin_subscription_id | default(lookup('env','AZURE_SUBSCRIPTION_ID')) }}"
        _azure_client: "{{ aadsshlogin_client_id       | default(lookup('env','AZURE_CLIENT_ID')) }}"
        _azure_secret: >-
          {{ aadsshlogin_secret
             | default(lookup('env','AZURE_SECRET') or lookup('env','AZURE_CLIENT_SECRET')) }}
        _azure_tenant: >-
          {{ aadsshlogin_tenant
             | default(lookup('env','AZURE_TENANT') or lookup('env','AZURE_TENANT_ID')) }}

    - name: Guard | Ensure Azure credentials are available
      assert:
        that:
          - _azure_sub is defined and _azure_sub | length > 0
          - _azure_client is defined and _azure_client | length > 0
          - _azure_secret is defined and _azure_secret | length > 0
          - _azure_tenant is defined and _azure_tenant | length > 0
        fail_msg: >
          Azure credentials not available. Provide subscription_id, client_id, secret, tenant
          via role vars (aadsshlogin_*) or environment vars
          (AZURE_SUBSCRIPTION_ID, AZURE_CLIENT_ID, AZURE_SECRET/AZURE_CLIENT_SECRET, AZURE_TENANT/AZURE_TENANT_ID).

    # ---- Lookup VM details when location isn't already known ----
    - name: Get VM info when location is missing
      when: azure_location is not defined
      azure.azcollection.azure_rm_virtualmachine_info:
        resource_group: "{{ azure_rg }}"
        name: "{{ azure_vm_name }}"
        subscription_id: "{{ _azure_sub }}"
        client_id:       "{{ _azure_client }}"
        secret:          "{{ _azure_secret }}"
        tenant:          "{{ _azure_tenant }}"
      register: vm_info
      no_log: true

    - name: Set location and OS image metadata (publisher/offer)
      when: azure_location is not defined and (vm_info.vms | length) > 0
      set_fact:
        azure_location: "{{ (vm_info.vms | first).location }}"
        vm_image_publisher: "{{ (vm_info.vms | first).storage_profile.image_reference.publisher | default('') }}"
        vm_image_offer:     "{{ (vm_info.vms | first).storage_profile.image_reference.offer     | default('') }}"

    # ---- Normalize and decide whether to install on this image ----
    - name: Normalize image fields and decide applicability
      set_fact:
        vm_image_publisher_lc: "{{ (vm_image_publisher | default('unknown')) | lower }}"
        vm_image_offer_lc: "{{ (vm_image_offer | default('')) | lower }}"
        aadsshlogin_is_supported_image: >-
          {{
            ((vm_image_publisher | default('unknown') | lower) in ['canonical', 'debian'])
            or ('ubuntu' in (vm_image_offer | default('') | lower) or 'debian' in (vm_image_offer | default('') | lower))
            or (aadsshlogin_install_on_all_linux | default(false) | bool)
          }}

    - name: Debug | Image decision
      debug:
        msg:
          - "RG={{ azure_rg }} VM={{ azure_vm_name }} LOC={{ azure_location }}"
          - "Publisher={{ vm_image_publisher | default('not set') }} Offer={{ vm_image_offer | default('not set') }}"
          - "Install on this image? {{ aadsshlogin_is_supported_image }}"
      when: aadsshlogin_debug | default(true) | bool

    # ---- Query existing VM extensions ----
    - name: Query existing AAD SSH extension
      azure.azcollection.azure_rm_virtualmachineextension_info:
        resource_group: "{{ azure_rg }}"
        virtual_machine_name: "{{ azure_vm_name }}"
        name: "{{ aadsshlogin_extension_name | default('Azure AD based SSH Login') }}"
        subscription_id: "{{ _azure_sub }}"
        client_id:       "{{ _azure_client }}"
        secret:          "{{ _azure_secret }}"
        tenant:          "{{ _azure_tenant }}"
      register: extension_info
      no_log: true

    - name: Debug | Raw extension info
      debug:
        msg: "Extensions found: {{ extension_info.extensions | map(attribute='name') | list }}"
      when: aadsshlogin_debug | default(true) | bool

    - name: Compute presence flag
      set_fact:
        aadsshlogin_present: >-
          {{ (extension_info.extensions
               | selectattr('name','equalto', (aadsshlogin_extension_name | default('Azure AD based SSH Login')))
               | list | length) > 0 }}

    - name: Debug | Current extension presence
      debug:
        msg: "Azure AD based SSH Login present? {{ aadsshlogin_present }}"
      when: aadsshlogin_debug | default(true) | bool

    # ---- Install when applicable and not present ----
    - name: Ensure Azure AD based SSH Login extension is present
      when:
        - not aadsshlogin_present
        - aadsshlogin_is_supported_image
      azure.azcollection.azure_rm_virtualmachineextension:
        resource_group: "{{ azure_rg }}"
        virtual_machine_name: "{{ azure_vm_name }}"
        name: "{{ aadsshlogin_extension_name | default('Azure AD based SSH Login') }}"
        location: "{{ azure_location }}"
        publisher: "Microsoft.Azure.ActiveDirectory"
        virtual_machine_extension_type: "AADSSHLoginForLinux"
        type_handler_version: "1.0"
        auto_upgrade_minor_version: true
        state: present
        subscription_id: "{{ _azure_sub }}"
        client_id:       "{{ _azure_client }}"
        secret:          "{{ _azure_secret }}"
        tenant:          "{{ _azure_tenant }}"
      register: extension_install
      no_log: true

    # ---- Optional verification ----
    - name: Re-query extension after install
      when:
        - aadsshlogin_verify | default(true) | bool
        - extension_install is defined and extension_install.changed
      azure.azcollection.azure_rm_virtualmachineextension_info:
        resource_group: "{{ azure_rg }}"
        virtual_machine_name: "{{ azure_vm_name }}"
        name: "{{ aadsshlogin_extension_name | default('Azure AD based SSH Login') }}"
        subscription_id: "{{ _azure_sub }}"
        client_id:       "{{ _azure_client }}"
        secret:          "{{ _azure_secret }}"
        tenant:          "{{ _azure_tenant }}"
      register: extension_verify
      no_log: true

    - name: Assert extension present after install
      when:
        - aadsshlogin_verify | default(true) | bool
        - extension_install is defined and extension_install.changed
      assert:
        that:
          - (extension_verify.extensions
             | selectattr('name','equalto', (aadsshlogin_extension_name | default('Azure AD based SSH Login')))
             | list | length) > 0
        fail_msg: >
          AAD SSH Login extension not found after install attempt on {{ azure_vm_name }} in {{ azure_rg }}.

    - name: Debug | Verification extension info
      debug:
        msg: "Verification extensions found: {{ extension_verify.extensions | map(attribute='name') | list }}"
      when:
        - aadsshlogin_debug | default(true) | bool
        - extension_verify is defined
      no_log: true

  delegate_to: localhost
  vars:
    ansible_connection: local
  become: false
  environment:
    # Provide both sets of names so either the collection or SDK paths are satisfied.
    AZURE_SUBSCRIPTION_ID: "{{ _azure_sub | default(lookup('env','AZURE_SUBSCRIPTION_ID')) }}"
    AZURE_CLIENT_ID:       "{{ _azure_client | default(lookup('env','AZURE_CLIENT_ID')) }}"
    AZURE_SECRET:          "{{ _azure_secret | default(lookup('env','AZURE_SECRET') or lookup('env','AZURE_CLIENT_SECRET')) }}"
    AZURE_TENANT:          "{{ _azure_tenant | default(lookup('env','AZURE_TENANT') or lookup('env','AZURE_TENANT_ID')) }}"
    AZURE_CLIENT_SECRET:   "{{ _azure_secret | default(lookup('env','AZURE_CLIENT_SECRET') or lookup('env','AZURE_SECRET')) }}"
    AZURE_TENANT_ID:       "{{ _azure_tenant | default(lookup('env','AZURE_TENANT_ID') or lookup('env','AZURE_TENANT')) }}"