
---
# - name: Require enrollment_token
#   assert:
#     that:
#       - enrollment_token is defined
#       - (enrollment_token | length) > 0
#     fail_msg: "You must provide enrollment_token (via --extra-vars, Vault, or AAP Survey)."

- name: Set OS/arch facts (x86_64 only)
  set_fact:
    ea_arch_raw: "{{ ansible_architecture }}"
    ea_arch: "x86_64"
    ea_os: "{{ ansible_system | lower | trim }}"

# --- Skip-if-running logic ---
- name: Gather service facts early
  service_facts:

- name: Determine if Elastic Agent is already running
  set_fact:
    agent_running: >-
      {{
        ('elastic-agent.service' in ansible_facts.services)
        and (ansible_facts.services['elastic-agent.service'].state == 'running')
      }}

- name: Skip install - Elastic Agent already running (one-time installer policy)
  debug:
    msg: "Elastic Agent service is running; skipping installation (set force_install=true to reinstall)."
  when:
    - agent_running
    - not force_install

# --- Only proceed with install path if NOT running or if we are forcing reinstall ---
- name: Fetch desired Elastic Agent version from URL
  uri:
    url: "{{ version_source_url }}"
    method: GET
    return_content: true
    status_code: 200
    timeout: 30
    validate_certs: yes
  register: version_resp
  when:
    - force_install or not agent_running

- name: Choose raw version (override or fetched)
  set_fact:
    elastic_agent_version_raw: "{{ version_override | default(version_resp.content | default('')) }}"
  when:
    - force_install or not agent_running

- name: Sanitize version string (strip CR/LF and surrounding whitespace)
  set_fact:
    elastic_agent_version: "{{ elastic_agent_version_raw | regex_replace('\r|\n', '') | trim }}"
  when:
    - force_install or not agent_running

- name: Assert sanitized version looks valid (no spaces)
  assert:
    that:
      - "' ' not in elastic_agent_version"
      - elastic_agent_version | length > 0
    fail_msg: "Elastic Agent version contains spaces or is empty. Check version_source_url or set version_override."
  when:
    - force_install or not agent_running

- name: Compute artifact filename
  set_fact:
    ea_filename: "elastic-agent-{{ elastic_agent_version }}-{{ ea_os }}-{{ ea_arch }}"
  when:
    - force_install or not agent_running

- name: Compute artifact paths and URLs
  set_fact:
    ea_tarball: "{{ work_dir }}/{{ ea_filename }}.tar.gz"
    ea_url: "https://artifacts.elastic.co/downloads/beats/elastic-agent/{{ ea_filename }}.tar.gz"
  when:
    - force_install or not agent_running

- name: Optional - stop/uninstall when force_install=true
  include_tasks: uninstall.yml
  when: force_install

- name: Ensure temp dir exists
  file:
    path: "{{ work_dir }}"
    state: directory
    mode: '0755'
  when:
    - force_install or not agent_running

- name: Download Elastic Agent tarball
  get_url:
    url: "{{ ea_url }}"
    dest: "{{ ea_tarball }}"
    mode: '0644'
    force: true
    timeout: 60
    validate_certs: yes
  when:
    - force_install or not agent_running

- name: Remove any previous extracted directory
  file:
    path: "{{ work_dir }}/{{ ea_filename }}"
    state: absent
  when:
    - force_install or not agent_running

- name: Extract Elastic Agent
  unarchive:
    src: "{{ ea_tarball }}"
    dest: "{{ work_dir }}"
    remote_src: true
  when:
    - force_install or not agent_running

- name: Ensure elastic-agent binary is executable
  file:
    path: "{{ work_dir }}/{{ ea_filename }}/elastic-agent"
    mode: '0755'
    state: file
  when:
    - force_install or not agent_running

- name: Install Elastic Agent
  block:
    - name: Install into Fleet
      command: >
        ./elastic-agent install
        --url={{ fleet_url }}
        --force
        --non-interactive
        --enrollment-token={{ lookup('env', 'ENROLLMENT_TOKEN') }}
        {% if agent_tags is defined and agent_tags|length > 0 %}--tag="{{ agent_tags }}"{% endif %}
      args:
        chdir: "{{ work_dir }}/{{ ea_filename }}"
        creates: "/opt/Elastic/Agent/elastic-agent"
      register: install_cmd
  always:
    - name: Cleanup extracted directory
      file:
        path: "{{ work_dir }}/{{ ea_filename }}"
        state: absent
    - name: Cleanup tarball
      file:
        path: "{{ ea_tarball }}"
        state: absent
  when:
    - force_install or not agent_running
