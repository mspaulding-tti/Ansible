---
- name: Enforce PAM Configurations with AAD Compatibility
  hosts: all
  become: true
  vars:
    faillock_deny: 5
    faillock_unlock_time: 900
    pwquality_minlen: 16
    pwhistory_remember: 24

  tasks:
    - name: Install PAM modules
      package:
        name:
          - libpam-pwquality
          - libpam-aad
        state: present

    - name: Check if pwquality is enabled
      command: pam-auth-update --package
      register: pam_profiles
      changed_when: false  # Don't mark as changed

    - name: Enable pwquality profile
      command: pam-auth-update --enable pwquality --force
      when: '"pwquality" not in pam_profiles.stdout'
      changed_when: true  # Explicitly mark if run

    - name: Insert pam_faillock preauth before pam_unix  # Corrected placement
      community.general.pamd:
        name: common-auth
        type: auth
        control: "[success=2 default=ignore]"  # Match actual control
        module_path: pam_unix.so
        new_type: auth
        new_control: required
        new_module_path: pam_faillock.so
        module_arguments: "preauth silent deny={{ faillock_deny }} unlock_time={{ faillock_unlock_time }}"
        state: before

    - name: Insert pam_faillock authfail after pam_aad  # Corrected placement
      community.general.pamd:
        name: common-auth
        type: auth
        control: "[success=1 default=ignore]"  # Match actual control
        module_path: pam_aad.so
        new_type: auth
        new_control: "[default=die]"
        new_module_path: pam_faillock.so
        module_arguments: "authfail deny={{ faillock_deny }} unlock_time={{ faillock_unlock_time }}"
        state: after

    - name: Insert pam_faillock authsucc after authfail  # Corrected placement
      community.general.pamd:
        name: common-auth
        type: auth
        control: "[default=die]"  # Match actual control
        module_path: faillock.so
        new_type: auth
        new_control: "sufficient"
        new_module_path: pam_faillock.so
        module_arguments: "authsucc"
        state: after

    - name: Add pam_faillock to account in common-account
      community.general.pamd:
        name: common-account
        type: account
        control: required  # Adjust if your common-account uses sufficient or other
        module_path: pam_unix.so
        new_type: account
        new_control: required
        new_module_path: pam_faillock.so
        state: after

    - name: Configure pam_pwquality
      community.general.pamd:
        name: common-password
        type: password
        control: sufficient
        module_path: pam_unix.so
        new_type: password
        new_control: requisite
        new_module_path: pam_pwquality.so
        module_arguments: "try_first_pass local_users_only retry=3 minlen={{ pwquality_minlen }} difok=3"
        state: before

    - name: Configure pam_pwhistory
      community.general.pamd:
        name: common-password
        type: password
        control: requisite
        module_path: pam_pwquality.so
        new_type: password
        new_control: sufficient
        new_module_path: pam_pwhistory.so
        module_arguments: "remember={{ pwhistory_remember }} use_authtok"
        state: after