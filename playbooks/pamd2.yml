---
- name: Enforce PAM Configurations with AAD Compatibility
  hosts: all
  become: true
  vars:
    # Customizable per policy/host
    faillock_deny: 5
    faillock_unlock_time: 900
    pwquality_minlen: 16
    pwhistory_remember: 24

  tasks:
    # Install required packages (adapt for distro)
    - name: Install PAM modules
      package:
        name:
          - libpam-pwquality  # For pwquality
          - libpam-aad       # Assuming AAD is pre-installed
        state: present

    # Enable base profiles if using pam-auth-update (Ubuntu/Debian)
    - name: Enable pwquality profile
      command: pam-auth-update --enable pwquality --force
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Use pamd to insert faillock preauth AFTER pam_aad (to avoid skip landing on authfail)
    - name: Insert pam_faillock preauth after pam_aad
      community.general.pamd:
        name: common-auth
        type: auth
        control: sufficient  # Match pam_aad's typical control
        module_path: pam_aad.so
        new_type: auth
        new_control: required
        new_module_path: pam_faillock.so
        module_arguments: "preauth silent deny={{ faillock_deny }} unlock_time={{ faillock_unlock_time }}"
        state: after

    # Insert faillock authfail BEFORE pam_unix (standard position, but after AAD)
    - name: Insert pam_faillock authfail before pam_unix
      community.general.pamd:
        name: common-auth
        type: auth
        control: sufficient  # pam_unix's typical control
        module_path: pam_unix.so
        new_type: auth
        new_control: "[default=die]"
        new_module_path: pam_faillock.so
        module_arguments: "authfail deny={{ faillock_deny }} unlock_time={{ faillock_unlock_time }}"
        state: before

    # Add account required for faillock in common-account
    - name: Add pam_faillock to account in common-account
      community.general.pamd:
        name: common-account
        type: account
        control: required
        module_path: pam_unix.so  # Insert after unix for account
        new_type: account
        new_control: required
        new_module_path: pam_faillock.so
        state: after

    # Configure pwquality (update if exists, or insert after unix)
    - name: Configure pam_pwquality
      community.general.pamd:
        name: common-password
        type: password
        control: sufficient
        module_path: pam_unix.so
        new_type: password
        new_control: requisite
        new_module_path: pam_pwquality.so
        module_arguments: "try_first_pass local_users_only retry=3 minlen={{ pwquality_minlen }} difok=3"
        state: before  # Or 'updated' to modify existing

    # Configure pwhistory (insert after pwquality or unix)
    - name: Configure pam_pwhistory
      community.general.pamd:
        name: common-password
        type: password
        control: requisite
        module_path: pam_pwquality.so  # After pwquality if present
        new_type: password
        new_control: sufficient
        new_module_path: pam_pwhistory.so
        module_arguments: "remember={{ pwhistory_remember }} use_authtok"
        state: after