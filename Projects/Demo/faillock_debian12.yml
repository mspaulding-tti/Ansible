---
- name: Ensure faillock is enabled and configure PAM on Debian
  hosts: all
  vars_files:
    -debian12.yml
  become: true
  tasks:

    - name: Ensure libpam-modules is installed (contains pam_faillock)
      apt:
        name: libpam-modules
        state: present
        update_cache: yes

    - name: Backup existing /etc/pam.d/common-auth
      copy:
        src: /etc/pam.d/common-auth
        dest: /etc/pam.d/common-auth.bak
        remote_src: yes
        backup: yes

    - name: Set custom PAM configuration for faillock in /etc/pam.d/common-auth
      copy:
        dest: /etc/pam.d/common-auth
        content: |
          # This file is managed by Ansible
          #
          #
          # /etc/pam.d/common-auth - authentication settings common to all services
          #
          # This file is included from other service-specific PAM config files,
          # and should contain a list of the authentication modules that define
          # the central authentication scheme for use on the system
          # (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the
          # traditional Unix authentication mechanisms.
          #
          # As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
          # To take advantage of this, it is recommended that you configure any
          # local modules either before or after the default block, and use
          # pam-auth-update to manage selection of other modules.  See
          # pam-auth-update(8) for details.

          # here are the per-package modules (the "Primary" block)
          auth    required                        pam_faillock.so preauth audit deny=5 unlock_time=900
          auth    [success=2 ignore=ignore default=die]  pam_aad.so
          auth    [success=1 default=ignore]      pam_unix.so nullok try_first_pass
          auth    [default=die]                   pam_faillock.so authfail audit deny=5 unlock_time=900
          auth    sufficient                      pam_faillock.so authsucc audit deny=5 unlock_time=900

          # here's the fallback if no module succeeds
          auth    requisite                       pam_deny.so
          # prime the stack with a positive return value if there isn't one already;
          # this avoids us returning an error just because nothing sets a success code
          # since the modules above will each just jump around
          auth    required                        pam_permit.so
          # and here are more per-package modules (the "Additional" block)
          # end of pam-auth-update config
        owner: root
        group: root
        mode: '0644'

    - name: Backup existing /etc/pam.d/common-account
      copy:
        src: /etc/pam.d/common-account
        dest: /etc/pam.d/common-account.bak
        remote_src: yes
        backup: yes

    - name: Set custom PAM configuration for faillock in /etc/pam.d/common-account
      copy:
        dest: /etc/pam.d/common-account
        content: |
          # This file is managed by Ansible
          #
          # /etc/pam.d/common-account - authorization settings common to all services
          #
          # This file is included from other service-specific PAM config files,
          # and should contain a list of the authorization modules that define
          # the central access policy for use on the system.  The default is to
          # only deny service to users whose accounts are expired in /etc/shadow.
          #
          # As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
          # To take advantage of this, it is recommended that you configure any
          # local modules either before or after the default block, and use
          # pam-auth-update to manage selection of other modules.  See
          # pam-auth-update(8) for details.
          #

          # here are the per-package modules (the "Primary" block)
          account required                        pam_faillock.so
          account [success=2 ignore=ignore default=die]  pam_aad.so
          account [success=1 new_authtok_reqd=done default=ignore]        pam_unix.so
          # here's the fallback if no module succeeds
          account requisite                       pam_deny.so
          # prime the stack with a positive return value if there isn't one already;
          # this avoids us returning an error just because nothing sets a success code
          # since the modules above will each just jump around
          account required                        pam_permit.so
          # and here are more per-package modules (the "Additional" block)
          # end of pam-auth-update config
        owner: root
        group: root
        mode: '0644'

    - name: Backup existing /etc/security/faillock.conf
      copy:
        src: /etc/security/faillock.conf
        dest: /etc/security/faillock.conf.bak
        remote_src: yes
        backup: yes

    - name: Set custom PAM configuration for faillock in /etc/security/faillock.conf
      copy:
        dest: /etc/security/faillock.conf
        content: |
          # This file is managed by Ansible
          #
          # Configuration for locking the user after multiple failed
          # authentication attempts.
          #
          # The directory where the user files with the failure records are kept.
          # The default is /var/run/faillock.
          # dir = /var/run/faillock
          #
          # Will log the user name into the system log if the user is not found.
          # Enabled if option is present.
          audit
          #
          # Don't print informative messages.
          # Enabled if option is present.
          # silent
          #
          # Don't log informative messages via syslog.
          # Enabled if option is present.
          # no_log_info
          #
          # Only track failed user authentications attempts for local users
          # in /etc/passwd and ignore centralized (AD, IdM, LDAP, etc.) users.
          # The `faillock` command will also no longer track user failed
          # authentication attempts. Enabling this option will prevent a
          # double-lockout scenario where a user is locked out locally and
          # in the centralized mechanism.
          # Enabled if option is present.
          # local_users_only
          #
          # Deny access if the number of consecutive authentication failures
          # for this user during the recent interval exceeds n tries.
          # The default is 3.
          deny = 5
          #
          # The length of the interval during which the consecutive
          # authentication failures must happen for the user account
          # lock out is <replaceable>n</replaceable> seconds.
          # The default is 900 (15 minutes).
          # fail_interval = 900
          #
          # The access will be re-enabled after n seconds after the lock out.
          # The value 0 has the same meaning as value `never` - the access
          # will not be re-enabled without resetting the faillock
          # entries by the `faillock` command.
          # The default is 600 (10 minutes).
          unlock_time = 900
          #
          # Root account can become locked as well as regular accounts.
          # Enabled if option is present.
          # even_deny_root
          #
          # This option implies the `even_deny_root` option.
          # Allow access after n seconds to root account after the
          # account is locked. In case the option is not specified
          # the value is the same as of the `unlock_time` option.
          # root_unlock_time = 900
          #
          # If a group name is specified with this option, members
          # of the group will be handled by this module the same as
          # the root account (the options `even_deny_root>` and
          # `root_unlock_time` will apply to them.
          # By default, the option is not set.
          # admin_group = <admin_group_name>
        owner: root
        group: root
        mode: '0644'

